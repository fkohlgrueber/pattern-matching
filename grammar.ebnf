
(*
+---+----------------------------------------------------------+
|   |             ERE Precedence (from high to low)            |
+---+----------------------------------------------------------+
| 1 | Collation-related bracket symbols | [==] [::] [..]       |
| 2 | Escaped characters                | \<special character> |
| 3 | Bracket expression                | []                   |
| 4 | Grouping                          | ()                   |
| 5 | Single-character-ERE duplication  | * + ? {m,n}          |
| 6 | Concatenation                     |                      |
| 7 | Anchoring                         | ^ $                  |
| 8 | Alternation                       | |                    |
+---+-----------------------------------+----------------------+
https://stackoverflow.com/questions/36870168/operator-precedence-in-regular-expressions


+---+----------------------------------------------------------+
|   |             PAT Precedence (from high to low)            |
+---+----------------------------------------------------------+
| 2 | Escaped characters                | \<special character> |
| 3 | Call                              | <ident>(...)         |
| 4 | Grouping                          | ()                   |
| 5 | Single-character-ERE duplication  | * + ? {m,n}          |
| 6 | Naming                            | #<ident>             |
| 6 | Concatenation                     |                      |
| 8 | Alternation                       | |                    |
+---+-----------------------------------+----------------------+


Prefixes:

_                | DONE
()               | DONE
<ident> (...)    | DONE
<expr>           | 
<tt> repeat      | DONE
<tt> | <tt>      | DONE
<tt> # <ident>   | DONE
<tt> ; <tt>      | DONE
(...)            | DONE


enum Expr {
    Node(Ident, Vec<Expr>),
    Repeat(Box<Expr>, Repeat),
    Alt(Box<Expr>, Box<Expr>),
    Named(Box<Expr>, Ident),
    Seq(Box<Expr>, Box<Expr>),
    Any,
    Empty,
}

*)


pattern 
= alt;

(* A node with arguments *)
node = <ident>, '(', [pattern, {',', pattern} [',']], ')';

(* Repetition *)
rep = pattern, ['?' | '*' | '+' | rep_from_to];
rep_from_to = '{', [<expr>], ',', [<expr>], '}';

(* Sequence *)
seq 
= "(", ")"
| rep, {rep};

(* Alternation *)
alt
= "_"
| ['|'], alt_elmt, {'|', alt_elmt} ['|'];

alt_elmt 
= "(", alt, ")"
| node
| <expr>;

